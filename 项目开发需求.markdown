# 开源绘画网站项目开发需求文档

## 项目概述
本项目旨在开发一个开源的绘画网站，利用 SiliconFlow 的图片生成 API（POST /images/generations）为用户提供基于文本提示生成图像的功能。网站需具备美观、简约、大气的前端界面，支持用户输入提示词、调整生成参数，并展示生成的图片。后台需实现负载均衡、自动重试和轮询机制以确保 API 请求的稳定性和高效性。

## 功能需求

### 1. 前端功能
- **用户界面**
  - 设计简约、美观、大气的界面，采用现代化的设计风格（如 Tailwind CSS）。
  - 提供直观的输入框用于输入 `prompt`（提示词）和 `negative_prompt`（负面提示词）。
  - 提供下拉菜单或输入框以选择 `model`（支持 `Kwai-Kolors/Kolors`）。
  - 提供图像分辨率选择（`image_size`），列出推荐分辨率（如 Qwen-Image 模型的 "1328x1328"、"1664x928" 等）。
  - 提供参数调整功能，包括：
    - `batch_size`（生成图片数量，范围 1-4，默认为 1）。
    - `seed`（种子值，范围 0-9999999999）。
    - `num_inference_steps`（推理步数，范围 1-100，默认为 20）。
    - `guidance_scale`（引导尺度，范围 0-20，默认为 7.5）。
    - `cfg`（仅限 Qwen/Qwen-Image，范围 0.1-20，默认为 4.0）。
  - 支持上传参考图片（`image`，需转换为 base64 格式）。
  - 提供生成按钮，点击后调用后端 API 生成图片。

- **图片展示**
  - 生成的图片以网格或瀑布流形式排列展示，响应式设计适配不同屏幕尺寸。
  - 每张图片下方显示生成参数（如 `seed`、生成时间等）。
  - 提供下载按钮，提示用户在 1 小时内下载（因 API 返回的图片 URL 有效期为 1 小时）。
  - 支持图片预览，点击图片可放大查看。

- **用户体验**
  - 提供生成进度提示（如加载动画）。
  - 显示 API 请求的状态（如成功、失败、重试中）。
  - 支持多语言切换（至少支持中文和英文）。

### 2. 后端功能
- **API 调用**
  - 集成 SiliconFlow 的图片生成 API（`POST https://api.siliconflow.cn/v1/images/generations`）。
  - 使用多个 API key 实现负载均衡，轮询调用不同的 key 以避免速率限制（IPM=2，IPD=400）。
  - 实现自动重试机制，处理 API 请求失败（如超时、429 Too Many Requests 等）。
  - 解析 API 返回的 JSON 数据，提取 `images.url`、`timings.inference` 和 `seed`。

- **负载均衡与轮询**
  - 维护一个 API key 池，动态选择可用 key。
  - 实现轮询机制，均匀分配请求到不同的 key。
  - 监控每个 key 的使用情况，记录请求次数和剩余配额。

- **错误处理**
  - 处理 API 返回的错误（如 401 Unauthorized、400 Bad Request），向用户提供友好的错误提示。
  - 实现指数退避重试策略，应对临时性网络问题或速率限制。

- **数据存储**
  - 临时存储生成的图片 URL 和参数，供用户查看历史记录。
  - 可选：实现本地缓存机制，自动下载生成的图片并存储到服务器，解决 URL 1 小时失效的问题。

### 3. 非功能需求
- **性能**
  - 前端页面加载时间不超过 2 秒。
  - 后端 API 请求响应时间（不含推理时间）控制在 500 毫秒以内。
  - 支持至少 100 个并发用户访问。

- **安全性**
  - 保护 API key 不泄露，前端不直接调用 SiliconFlow API，所有请求通过后端代理。
  - 对用户输入进行校验和清理，防止 XSS 和 SQL 注入。
  - 使用 HTTPS 确保数据传输安全。

- **可扩展性**
  - 代码模块化设计，便于后续添加新功能（如支持更多模型或 API）。
  - 支持多语言，便于国际化。

- **开源要求**
  - 项目代码托管在 GitHub，遵循 MIT 许可证。
  - 提供详细的 README 和开发文档，说明安装、配置和运行步骤。

## 技术栈
- **前端**
  - 框架：React（使用 JSX，CDN 引入 React 和相关依赖）。
  - 样式：Tailwind CSS。
  - 构建工具：Vite（用于开发和打包）。
  - 其他：Axios（用于 API 请求）。

- **后端**
  - 语言：Python（推荐 FastAPI 框架，高效且易于集成）。
  - HTTP 客户端：httpx（支持异步请求）。
  - 负载均衡：自定义实现或使用现有库（如 `roundrobin`）。
  - 缓存：Redis（可选，用于存储生成记录或图片）。

- **部署**
  - 服务器：支持 Docker 容器化部署。
  - 云服务：推荐使用 AWS、GCP 或其他支持 Python 和 Node.js 的云平台。
  - CDN：使用 Cloudflare 或类似服务加速静态资源加载。

## 项目结构
```
painting-website/
├── frontend/
│   ├── src/
│   │   ├── components/
│   │   │   ├── ImageGenerator.jsx      # 图片生成表单组件
│   │   │   ├── ImageGallery.jsx        # 图片展示组件
│   │   │   └── ...
│   │   ├── App.jsx                     # 主应用组件
│   │   └── index.html                  # 主 HTML 文件
│   ├── public/                         # 静态资源
│   └── package.json                    # 前端依赖
├── backend/
│   ├── app/
│   │   ├── api/
│   │   │   └── image.py               # 图片生成 API 路由
│   │   ├── utils/
│   │   │   └── load_balancer.py       # 负载均衡和轮询逻辑
│   │   └── main.py                    # FastAPI 主文件
│   └── requirements.txt                # 后端依赖
├── docker-compose.yml                  # Docker 部署配置
├── README.md                           # 项目说明
└── LICENSE                             # MIT 许可证
```

## 开发计划
1. **需求分析与设计（1 周）**
   - 确定 UI/UX 设计稿。
   - 设计 API 交互流程和负载均衡逻辑。

2. **前端开发（2 周）**
   - 搭建 React 项目，集成 Tailwind CSS。
   - 实现图片生成表单、参数选择和图片展示功能。

3. **后端开发（2 周）**
   - 搭建 FastAPI 项目，集成 SiliconFlow API。
   - 实现负载均衡、轮询和重试机制。

4. **测试与优化（1 周）**
   - 进行单元测试和集成测试。
   - 优化前端性能和后端响应时间。

5. **部署与文档（1 周）**
   - 配置 Docker 部署。
   - 编写 README 和开发文档。

## 风险与应对措施
- **风险 1**：API 速率限制导致服务不可用。
  - **应对**：实现负载均衡和自动重试，确保请求分散到多个 key。
- **风险 3**：前端界面复杂导致加载缓慢。
  - **应对**：使用 CDN 加速静态资源，优化 React 组件渲染。

## 参考文档
- SiliconFlow API 文档：https://docs.siliconflow.cn/cn/api-reference/images/images-generations
- React 文档：https://react.dev/
- FastAPI 文档：https://fastapi.tiangolo.com/
- Tailwind CSS 文档：https://tailwindcss.com/